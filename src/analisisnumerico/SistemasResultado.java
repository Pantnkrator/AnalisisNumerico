/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analisisnumerico;

import javax.swing.JOptionPane;
import org.lsmp.djep.djep.DJep;
import org.nfunk.jep.Node;
import org.nfunk.jep.ParseException;

/**
 *
 * @author toto
 */
public class SistemasResultado extends javax.swing.JPanel {

    /**
     * Creates new form SistemasResultado
     */
    public SistemasResultado(String s, String s1) {
        initComponents();
        
        double Fx[][] = new double[10][40];
        String J[][]=new String[10][10];
        String F[]=s.split("\n");
        double X[]= new double[10];
        double Y[]=new double[10];
        int n=0;
        String g=""; 
        for(int i=0; i<s1.length(); i++){
            if(s1.charAt(i)=='\n'){
                X[n]=Double.parseDouble(g);
                g="";
                n++;
            }else
                g+=s1.charAt(i);
        }
        X[n]=Double.parseDouble(g);
        n=F.length;
        DJep k = new DJep();
        String derivada = "";
        //DJep es la clase encargada de la derivacion en su escencia
        k.addStandardConstants();
        //agrega constantes estandares, pi, e, etc
        k.addStandardFunctions();
        //agrega funciones estandares cos(x), sin(x)
        k.addComplex();
        //por si existe algun numero complejo
        k.setAllowUndeclared(true);
        //permite variables no declarables
        k.setAllowAssignment(true);
        //permite asignaciones
        k.setImplicitMul(true);
        //regla de multiplicacion o para sustraccion y sumas
        k.addStandardDiffRules();
        
        for(int i=0; i<n; i++){
            String fi=F[i];
            for(int j=0; j<n; j++){
                try{
                    //coloca el nodo con una funcion preestablecida
                    Node node = k.parse(fi);
                    //deriva la funcion con respecto a x
                    String x="x"+(char)(j+(int)'1');
                    Node diff = k.differentiate(node,x);
                    //Simplificamos la funcion con respecto a x
                    Node simp = k.simplify(diff);
                    //Convertimos el valor simplificado en un String
                    derivada =k.toString(simp);
                    //imprime la funciÃ³n
                    // j.println(simp);
                } catch(ParseException e){ e.printStackTrace();}
                J[i][j]=derivada;
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                System.out.printf(J[i][j]+"    ");
            }
            System.out.println();
        }
        Evaluador v = new Evaluador();
        for(int i=0; i<n; i++){
            Fx[i][0]=v.eval(F[i], X, n);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 780, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
