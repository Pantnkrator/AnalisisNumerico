/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package analisisnumerico;

import javax.swing.JOptionPane;
import org.lsmp.djep.djep.DJep;
import org.nfunk.jep.Node;
import org.nfunk.jep.ParseException;

/**
 *
 * @author toto
 */
public class NewtonResultado extends javax.swing.JPanel {

    /**
     * Creates new form NewtonResultado
     */
    
    
    public static String convertir(Funcion F, double x){
    String S="";
    String q="("+Double.toString(x)+")";
    String f=F.getF();
    for(int i=0; i<f.length(); i++){
        if(f.charAt(i)=='x'){
            S+=q;
        }else
            S+=f.charAt(i);
    }
    return S;
    }
    
    public NewtonResultado(Funcion F, double inicial, double eps) {
        initComponents();
        DJep j = new DJep();
        String derivada = "";
        //DJep es la clase encargada de la derivacion en su escencia
        j.addStandardConstants();
        //agrega constantes estandares, pi, e, etc
        j.addStandardFunctions();
        //agrega funciones estandares cos(x), sin(x)
        j.addComplex();
        //por si existe algun numero complejo
        j.setAllowUndeclared(true);
        //permite variables no declarables
        j.setAllowAssignment(true);
        //permite asignaciones
        j.setImplicitMul(true);
        //regla de multiplicacion o para sustraccion y sumas
        j.addStandardDiffRules();

        try{
            //coloca el nodo con una funcion preestablecida
            Node node = j.parse(F.getF());
            //deriva la funcion con respecto a x
            Node diff = j.differentiate(node,"x");
            //Simplificamos la funcion con respecto a x
            Node simp = j.simplify(diff);
            //Convertimos el valor simplificado en un String
            derivada =j.toString(simp);
            System.out.println(derivada);
            //imprime la funciÃ³n
            // j.println(simp);
        } catch(ParseException e){ e.printStackTrace();}
        
        Funcion diff=new Funcion();
        diff.setF(derivada);
        
        String f=F.getF();
        System.out.println(f);
        Evaluador e=new Evaluador();
        String i=convertir(F, inicial);
        String di=convertir(diff, inicial);
        double fi=e.eval(i);
        double fdi=e.eval(di);
        while(Math.abs(fi)>eps){
            i=convertir(F, inicial);
            di=convertir(diff, inicial);
            fi=e.eval(i);
            fdi=e.eval(di);
            inicial=inicial-(fi/fdi);
        }
        JOptionPane.showMessageDialog(null, "Una raiz es :"+inicial);
        Menu v = new Menu(F);
        removeAll();
        v.setBounds(0, 0, 780, 480);
        add(v);
        v.setVisible(true);
        updateUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 780, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
